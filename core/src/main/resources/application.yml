server:
  port: 8081

spring:
  sql:
    init:
      mode: always
  jpa:
#    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: true
    hibernate:
      ddl-auto: none
  datasource:
#    url: jdbc:postgresql://localhost:5432/ice-hockey-manager
    url: jdbc:h2:file:./h2/ice-hockey-manager
    username: sa
    password: password
#    driver-class-name: org.postgresql.Driver
    driverClassName: org.h2.Driver
  h2:
    console:
      enabled: true
  mvc:
    log-request-details: true
  # OAuth 2 stuff
  security:
    oauth2:
      resourceserver:
        opaque-token:
          introspection-uri: https://oidc.muni.cz/oidc/introspect
          # Martin Kuba's testing resource server
          client-id: d57b3a8f-156e-46de-9f27-39c4daee05e1
          client-secret: fa228ebc-4d54-4cda-901e-4d6287f8b1652a9c9c44-73c9-4502-973f-bcdb4a8ec96a

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  endpoint:
    health:
      show-details: always

springdoc:
  api-docs:
    path: /openapi
  swagger-ui:
    path: /swagger-ui.html

logging:
  pattern:
    console: '%clr(%d{HH:mm:ss.SSS}){blue} %clr(%-5p) %clr(%logger){blue} %clr(:){red} %clr(%m){faint}%n'
  level:
    root: info
    cz.muni: debug
    org.springframework.web.client.RestTemplate: debug
    org.springframework.web: info
    jdk.event.security: info
    org.springframework.security.oauth2.server.resource: trace
    org.springframework.security.web.DefaultSecurityFilterChain: warn
    org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter: debug
    org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: warn
    org.springframework.web.servlet.DispatcherServlet: warn
    org.apache.catalina.core: warn
